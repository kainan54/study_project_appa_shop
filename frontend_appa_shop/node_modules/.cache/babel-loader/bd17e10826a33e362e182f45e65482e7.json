{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/kain/study_project_appa_shop/frontend_appa_shop/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport HomePage from './pages/homepage/HomePage';\nimport ShopPage from './pages/shop-page/ShopPage';\nimport Navbar from './components/navbar/Navbar';\nimport { Switch, Route } from 'react-router-dom';\nimport SignInAndSignUp from './pages/sign-in-and-sign-up/SignInAndSignUp';\nimport Cookies from 'js-cookie';\nimport { setCurrentUser } from './redux/user/userActions';\n\nfunction App({\n  currentUser,\n  setCurrentUser\n}) {\n  _s();\n\n  const getCurrentUser = () => {\n    const token = Cookies.get('appaShop');\n\n    if (token) {\n      fetch('http://localhost:3000/api/v1/get-user', {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json',\n          'Content-type': 'application/json'\n        }\n      }).then(response => response.json()).then(({\n        user\n      }) => {\n        console.log(user, currentUser);\n      });\n    }\n\n    ;\n  };\n\n  const getCurrentUserCallback = useCallback(getCurrentUser, [currentUser]);\n  useEffect(() => {\n    getCurrentUserCallback();\n  }, [getCurrentUserCallback]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        component: HomePage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 50,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/shop\",\n        component: ShopPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/signin\",\n        component: SignInAndSignUp\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 47,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"saqYB+jMIr6swSnmF8qtQfzI+xg=\");\n\n_c = App;\n;\n/*\n  -mdp allows us to access actions/function in order alter the redux store/state\n  if configured correct:\n\n  -mdp is set to function with a dispatch arg, it then returns an object with a key set to the\n  name of the corrosponding imported action function \n\n   -the 'action-key' pairs to a function that takes in whatever value you intend to pass into\n   your imported action/function, it then returns dispatch( yourAction(value) )\n\n   - we can now call props.yourAction(val) for example, props.setCurrentUser(userObject) -or-\n    props.setCurrentUser(null) to set/remove currentUser in the redux store.\n*/\n\nconst mdp = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n/*\n  -msp allows us to read data from the redux store if configured correct:\n\n  -msp is set to a function that has a reduxState/store parameter, it then \n  returns an object that is mapped to props so {currentUser: reduxState.user.currentUser}\n  gives access to currentUser from store via props.currentUser\n*/\n\n\nconst msp = reduxState => ({\n  currentUser: reduxState.user.currentUser\n}); // HOC Connect + msp/mdp allows component(App) to read(msp) and write(mdp) to redux store/state\n\n\nexport default connect(msp, mdp)(App);\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/home/kain/study_project_appa_shop/frontend_appa_shop/src/App.js"],"names":["React","useEffect","useCallback","connect","HomePage","ShopPage","Navbar","Switch","Route","SignInAndSignUp","Cookies","setCurrentUser","App","currentUser","getCurrentUser","token","get","fetch","method","headers","Authorization","Accept","then","response","json","user","console","log","getCurrentUserCallback","mdp","dispatch","msp","reduxState"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,EAA2BC,WAA3B,QAA8C,OAA9C;AACA,SAASC,OAAT,QAAwB,aAAxB;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,MAAT,EAAiBC,KAAjB,QAA8B,kBAA9B;AACA,OAAOC,eAAP,MAA4B,6CAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAEA,SAASC,GAAT,CAAa;AAAEC,EAAAA,WAAF;AAAeF,EAAAA;AAAf,CAAb,EAA8C;AAAA;;AAE5C,QAAMG,cAAc,GAAG,MAAM;AAC3B,UAAMC,KAAK,GAAGL,OAAO,CAACM,GAAR,CAAY,UAAZ,CAAd;;AAEA,QAAID,KAAJ,EAAW;AAETE,MAAAA,KAAK,CAAC,uCAAD,EAA0C;AAE7CC,QAAAA,MAAM,EAAE,KAFqC;AAI7CC,QAAAA,OAAO,EAAE;AACPC,UAAAA,aAAa,EAAG,UAASL,KAAM,EADxB;AAEPM,UAAAA,MAAM,EAAE,kBAFD;AAGP,0BAAgB;AAHT;AAJoC,OAA1C,CAAL,CAWCC,IAXD,CAWOC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EAXnB,EAYCF,IAZD,CAaE,CAAC;AAAEG,QAAAA;AAAF,OAAD,KAAc;AACZC,QAAAA,OAAO,CAACC,GAAR,CAAYF,IAAZ,EAAkBZ,WAAlB;AACD,OAfH;AAiBD;;AAAA;AAEF,GAxBD;;AA0BA,QAAMe,sBAAsB,GAAG1B,WAAW,CAACY,cAAD,EAAiB,CAACD,WAAD,CAAjB,CAA1C;AAEAZ,EAAAA,SAAS,CAAC,MAAM;AACd2B,IAAAA,sBAAsB;AACvB,GAFQ,EAEN,CAACA,sBAAD,CAFM,CAAT;AAIA,sBACE;AAAA,4BACE,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADF,eAEE,QAAC,MAAD;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,GAAlB;AAAsB,QAAA,SAAS,EAAExB;AAAjC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAEC;AAA/B;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,SAAZ;AAAsB,QAAA,SAAS,EAAEI;AAAjC;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFF;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAUD;;GA5CQG,G;;KAAAA,G;AA4CR;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMiB,GAAG,GAAIC,QAAD,KAAe;AACzBnB,EAAAA,cAAc,EAAEc,IAAI,IAAIK,QAAQ,CAACnB,cAAc,CAACc,IAAD,CAAf;AADP,CAAf,CAAZ;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMM,GAAG,GAAIC,UAAD,KAAiB;AAAEnB,EAAAA,WAAW,EAAEmB,UAAU,CAACP,IAAX,CAAgBZ;AAA/B,CAAjB,CAAZ,C,CAEE;;;AACF,eAAeV,OAAO,CAAC4B,GAAD,EAAMF,GAAN,CAAP,CAAkBjB,GAAlB,CAAf","sourcesContent":["import React, { useEffect, useCallback } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport HomePage from './pages/homepage/HomePage';\nimport ShopPage from './pages/shop-page/ShopPage';\nimport Navbar from './components/navbar/Navbar';\nimport { Switch, Route } from 'react-router-dom';\nimport SignInAndSignUp from './pages/sign-in-and-sign-up/SignInAndSignUp';\nimport Cookies from 'js-cookie';\nimport { setCurrentUser } from './redux/user/userActions'\n\nfunction App({ currentUser, setCurrentUser }) {\n  \n  const getCurrentUser = () => {\n    const token = Cookies.get('appaShop');\n  \n    if (token) {\n\n      fetch('http://localhost:3000/api/v1/get-user', {\n\n        method: 'GET',\n\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json',\n          'Content-type': 'application/json',\n        },\n\n      })\n      .then( response => response.json())\n      .then(\n        ({ user }) => {\n          console.log(user, currentUser)\n        }\n      );\n    };\n\n  };\n\n  const getCurrentUserCallback = useCallback(getCurrentUser, [currentUser])\n  \n  useEffect(() => {\n    getCurrentUserCallback();\n  }, [getCurrentUserCallback]);\n\n  return (\n    <div> \n      <Navbar />\n      <Switch>\n          <Route exact path='/' component={HomePage} />\n          <Route path='/shop' component={ShopPage} />\n          <Route path='/signin' component={SignInAndSignUp} />\n      </Switch>\n    </div>\n  );\n};\n\n/*\n  -mdp allows us to access actions/function in order alter the redux store/state\n  if configured correct:\n\n  -mdp is set to function with a dispatch arg, it then returns an object with a key set to the\n  name of the corrosponding imported action function \n\n   -the 'action-key' pairs to a function that takes in whatever value you intend to pass into\n   your imported action/function, it then returns dispatch( yourAction(value) )\n\n   - we can now call props.yourAction(val) for example, props.setCurrentUser(userObject) -or-\n    props.setCurrentUser(null) to set/remove currentUser in the redux store.\n*/\nconst mdp = (dispatch) => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\n/*\n  -msp allows us to read data from the redux store if configured correct:\n\n  -msp is set to a function that has a reduxState/store parameter, it then \n  returns an object that is mapped to props so {currentUser: reduxState.user.currentUser}\n  gives access to currentUser from store via props.currentUser\n*/\nconst msp = (reduxState) => ({ currentUser: reduxState.user.currentUser });\n\n  // HOC Connect + msp/mdp allows component(App) to read(msp) and write(mdp) to redux store/state\nexport default connect(msp, mdp)(App);\n"]},"metadata":{},"sourceType":"module"}