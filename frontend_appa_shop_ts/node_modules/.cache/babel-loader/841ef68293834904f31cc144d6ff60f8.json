{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/home/kain/study_project_appa_shop/frontend_appa_shop_ts/src/App.tsx\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from 'react';\nimport { connect } from 'react-redux';\nimport './App.css';\nimport HomePage from './pages/homepage/HomePage';\nimport ShopPage from './pages/shop-page/ShopPage';\nimport Navbar from './components/navbar/Navbar';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport SignInAndSignUp from './pages/sign-in-and-sign-up/SignInAndSignUp';\nimport Cookies from 'js-cookie';\nimport { setCurrentUser } from './redux/user/userActions';\n\n/*\n  -msp allows us to read data from the redux store if configured correct:\n\n  -msp is set to a function that has a reduxState/store parameter, it then \n  returns an object that is mapped to props so {currentUser: reduxState.user.currentUser}\n  gives access to currentUser from store via props.currentUser\n*/\nconst msp = reduxState => ({\n  currentUser: reduxState.user.currentUser\n});\n/*\n  -mdp allows us to access actions/function in order alter the redux store/state\n  if configured correct:\n\n  -mdp is set to function with a dispatch arg, it then returns an object with a key set to the\n  name of the corrosponding imported action function \n\n   -the 'action-key' pairs to a function that takes in whatever value you intend to pass into\n   your imported action/function, it then returns dispatch( yourAction(value) )\n\n   - we can now call props.yourAction(val) for example, props.setCurrentUser(userObject) -or-\n    props.setCurrentUser(null) to set/remove currentUser in the redux store.\n*/\n\n\nconst mdp = dispatch => ({\n  setCurrentUser: user => dispatch(setCurrentUser(user))\n});\n\nconst connector = connect(msp, mdp);\n\nconst App = function ({\n  currentUser,\n  setCurrentUser\n}) {\n  _s();\n\n  // if cookie exists, gets JWT and fetches currentUser from token\n  const getCurrentUser = () => {\n    const token = Cookies.get('appaShop');\n\n    if (token) {\n      fetch('http://localhost:3000/api/v1/get-user', {\n        method: 'GET',\n        headers: {\n          Authorization: `Bearer ${token}`,\n          Accept: 'application/json',\n          'Content-type': 'application/json'\n        }\n      }).then(response => response.json()).then(({\n        user\n      }) => {\n        // sets currentUser in redux store\n        setCurrentUser(user);\n      });\n    }\n  }; // when app loads run getCurrent user to check for cookie\n\n\n  useEffect(() => {\n    getCurrentUser();\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(Navbar, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Switch, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/\",\n        component: HomePage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 84,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"/shop\",\n        component: ShopPage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"/signin\",\n        render: () => currentUser ? /*#__PURE__*/_jsxDEV(Redirect, {\n          to: \"/\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 74\n        }, this) : /*#__PURE__*/_jsxDEV(SignInAndSignUp, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 86,\n          columnNumber: 96\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 9\n  }, this);\n}; // HOC Connect + msp/mdp allows component(App) to read(msp) and write(mdp) to redux store/state\n\n\n_s(App, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = App;\nexport default _c2 = connector(App);\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"App\");\n$RefreshReg$(_c2, \"%default%\");","map":{"version":3,"sources":["/home/kain/study_project_appa_shop/frontend_appa_shop_ts/src/App.tsx"],"names":["React","useEffect","connect","HomePage","ShopPage","Navbar","Switch","Route","Redirect","SignInAndSignUp","Cookies","setCurrentUser","msp","reduxState","currentUser","user","mdp","dispatch","connector","App","getCurrentUser","token","get","fetch","method","headers","Authorization","Accept","then","response","json"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,OAAT,QAAwC,aAAxC;AACA,OAAO,WAAP;AACA,OAAOC,QAAP,MAAqB,2BAArB;AACA,OAAOC,QAAP,MAAqB,4BAArB;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,SAASC,MAAT,EAAiBC,KAAjB,EAAwBC,QAAxB,QAAwC,kBAAxC;AACA,OAAOC,eAAP,MAA4B,6CAA5B;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,SAASC,cAAT,QAA+B,0BAA/B;;AAaA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMC,GAAG,GAAIC,UAAD,KAA4B;AAAEC,EAAAA,WAAW,EAAED,UAAU,CAACE,IAAX,CAAgBD;AAA/B,CAA5B,CAAZ;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAME,GAAG,GAAIC,QAAD,KAAgF;AACxFN,EAAAA,cAAc,EAAGI,IAAD,IAA8BE,QAAQ,CAACN,cAAc,CAACI,IAAD,CAAf;AADkC,CAAhF,CAAZ;;AAIA,MAAMG,SAAS,GAAGhB,OAAO,CAACU,GAAD,EAAMI,GAAN,CAAzB;;AAGA,MAAMG,GAA6B,GAAG,UAAU;AAAEL,EAAAA,WAAF;AAAeH,EAAAA;AAAf,CAAV,EAA2C;AAAA;;AAC7E;AACA,QAAMS,cAAc,GAAG,MAAM;AACzB,UAAMC,KAAK,GAAGX,OAAO,CAACY,GAAR,CAAY,UAAZ,CAAd;;AAEA,QAAID,KAAJ,EAAW;AACPE,MAAAA,KAAK,CAAC,uCAAD,EAA0C;AAC3CC,QAAAA,MAAM,EAAE,KADmC;AAG3CC,QAAAA,OAAO,EAAE;AACLC,UAAAA,aAAa,EAAG,UAASL,KAAM,EAD1B;AAELM,UAAAA,MAAM,EAAE,kBAFH;AAGL,0BAAgB;AAHX;AAHkC,OAA1C,CAAL,CASKC,IATL,CASWC,QAAD,IAAcA,QAAQ,CAACC,IAAT,EATxB,EAUKF,IAVL,CAUU,CAAC;AAAEb,QAAAA;AAAF,OAAD,KAAc;AAChB;AACAJ,QAAAA,cAAc,CAACI,IAAD,CAAd;AACH,OAbL;AAcH;AACJ,GAnBD,CAF6E,CAuB7E;;;AACAd,EAAAA,SAAS,CAAC,MAAM;AACZmB,IAAAA,cAAc;AACjB,GAFQ,EAEN,EAFM,CAAT;AAIA,sBACI;AAAA,4BACI,QAAC,MAAD;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI,QAAC,MAAD;AAAA,8BACI,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,GAAlB;AAAsB,QAAA,SAAS,EAAEjB;AAAjC;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI,QAAC,KAAD;AAAO,QAAA,IAAI,EAAC,OAAZ;AAAoB,QAAA,SAAS,EAAEC;AAA/B;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,KAAD;AAAO,QAAA,KAAK,MAAZ;AAAa,QAAA,IAAI,EAAC,SAAlB;AAA4B,QAAA,MAAM,EAAE,MAAOU,WAAW,gBAAG,QAAC,QAAD;AAAU,UAAA,EAAE,EAAC;AAAb;AAAA;AAAA;AAAA;AAAA,gBAAH,gBAAyB,QAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAA/E;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAUH,CAtCD,C,CAwCA;;;GAxCMK,G;;KAAAA,G;AAyCN,qBAAeD,SAAS,CAACC,GAAD,CAAxB","sourcesContent":["import React, { useEffect } from 'react';\nimport { connect, ConnectedProps } from 'react-redux';\nimport './App.css';\nimport HomePage from './pages/homepage/HomePage';\nimport ShopPage from './pages/shop-page/ShopPage';\nimport Navbar from './components/navbar/Navbar';\nimport { Switch, Route, Redirect } from 'react-router-dom';\nimport SignInAndSignUp from './pages/sign-in-and-sign-up/SignInAndSignUp';\nimport Cookies from 'js-cookie';\nimport { setCurrentUser } from './redux/user/userActions';\n\ninterface currentUser {\n    email: string;\n    id: number;\n}\n\ninterface RootState {\n    user: {\n        currentUser: currentUser;\n    };\n}\n\n/*\n  -msp allows us to read data from the redux store if configured correct:\n\n  -msp is set to a function that has a reduxState/store parameter, it then \n  returns an object that is mapped to props so {currentUser: reduxState.user.currentUser}\n  gives access to currentUser from store via props.currentUser\n*/\nconst msp = (reduxState: RootState) => ({ currentUser: reduxState.user.currentUser });\n\n/*\n  -mdp allows us to access actions/function in order alter the redux store/state\n  if configured correct:\n\n  -mdp is set to function with a dispatch arg, it then returns an object with a key set to the\n  name of the corrosponding imported action function \n\n   -the 'action-key' pairs to a function that takes in whatever value you intend to pass into\n   your imported action/function, it then returns dispatch( yourAction(value) )\n\n   - we can now call props.yourAction(val) for example, props.setCurrentUser(userObject) -or-\n    props.setCurrentUser(null) to set/remove currentUser in the redux store.\n*/\nconst mdp = (dispatch: (action: { type: string; payload: currentUser | null }) => void) => ({\n    setCurrentUser: (user: currentUser | null) => dispatch(setCurrentUser(user)),\n});\n\nconst connector = connect(msp, mdp);\ntype PropsFromRedux = ConnectedProps<typeof connector>;\n\nconst App: React.FC<PropsFromRedux> = function ({ currentUser, setCurrentUser }) {\n    // if cookie exists, gets JWT and fetches currentUser from token\n    const getCurrentUser = () => {\n        const token = Cookies.get('appaShop');\n\n        if (token) {\n            fetch('http://localhost:3000/api/v1/get-user', {\n                method: 'GET',\n\n                headers: {\n                    Authorization: `Bearer ${token}`,\n                    Accept: 'application/json',\n                    'Content-type': 'application/json',\n                },\n            })\n                .then((response) => response.json())\n                .then(({ user }) => {\n                    // sets currentUser in redux store\n                    setCurrentUser(user);\n                });\n        }\n    };\n\n    // when app loads run getCurrent user to check for cookie\n    useEffect(() => {\n        getCurrentUser();\n    }, []);\n\n    return (\n        <div>\n            <Navbar />\n            <Switch>\n                <Route exact path=\"/\" component={HomePage} />\n                <Route path=\"/shop\" component={ShopPage} />\n                <Route exact path=\"/signin\" render={() => (currentUser ? <Redirect to=\"/\" /> : <SignInAndSignUp />)} />\n            </Switch>\n        </div>\n    );\n};\n\n// HOC Connect + msp/mdp allows component(App) to read(msp) and write(mdp) to redux store/state\nexport default connector(App);\n"]},"metadata":{},"sourceType":"module"}